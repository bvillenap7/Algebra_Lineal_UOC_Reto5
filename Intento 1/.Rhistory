}
solution_1 <- uniroot(solve_equation_1, interval = c(0, 1))
L_1 <- solution_1$root
L_1
solve_equation_1 <- function(L) {
return(L^2 - 0.2)
}
solution_1 <- uniroot(solve_equation_1, interval = c(0, 1))
L_1 <- solution_1$root
L_1
solve_equation_2 <- function(L) {
return(-2L^2 + L)
}
solution_2 <- uniroot(solve_equation_1, interval = c(0, 1))
L_2 <- solution_1$root
L_2
solve_equation_2 <- function(M) {
return(-2*M^2 + M)
}
solution_2 <- uniroot(solve_equation_1, interval = c(0, 1))
L_2 <- solution_1$root
L_2
solve_equation_2 <- function(L) {
return(L * (1 / (1 - L * (1-L))) - 2 * L^2 * (1 / (1 - L * (1-L))))
}
solution_2 <- uniroot(solve_equation_2, interval = c(0, 1))
L_2 <- solution_2$root
L_2
solve_equation_2 <- function(M) {
return(-2*(M^2) + M)
}
solution_2 <- uniroot(solve_equation_1, interval = c(0, 1))
L_2 <- solution_1$root
L_2
solve_equation_2 <- function(M) {
return((-2*(M^2)) + M)
}
solution_2 <- uniroot(solve_equation_1, interval = c(0, 1))
L_2 <- solution_1$root
L_2
solve_equation_2 <- function(M) {
return(2*(M^2) - M)
}
solution_2 <- uniroot(solve_equation_1, interval = c(0, 1))
L_2 <- solution_1$root
L_2
solve((2*(M^2) - M))
solve((2*(M^2) - M),M)
solve_equation_2 <- function(M) {
return(2*(M^2) - M)
}
solution_2 <- uniroot(solve_equation_2, interval = c(0, 1))
L_2 <- solution_1$root
L_2
solve_equation_2 <- function(M) {
return(2*(M^2) - M)
}
solution_2 <- uniroot(solve_equation_2, interval = c(0, 1))
L_2 <- solution_2$root
L_2
solve((2*(M^2) - M))
solve_equation_2 <- function(M) {
return(2*(M^2) - M)
}
solution_2 <- uniroot(solve_equation_2, interval = c(0, 1))
L_2 <- solution_2
L_2
solve_equation_2 <- function(M) {
return(2*M^2 - M)
}
solution_2 <- uniroot(solve_equation_2, interval = c(0, 1))
L_2 <- solution_2
L_2
solve_equation_2 <- function(M) {
return(2*M^2 - M)
}
solution_2 <- uniroot(solve_equation_2, interval = c(0, 1))
L_2 <- solution_2$root
L_2
solve_equation_2 <- function(M) {
return(2*M^2 - M)
}
solution_2 <- uniroot(solve_equation_2, interval = c(0.1, 1))
L_2 <- solution_2$root
L_2
solve_equation_2 <- function(M) {
return(2*M^2 - M)
}
solution_2 <- uniroot(solve_equation_2, interval = c(0.1, 1))
L_2 <- solution_2$root
L_2
#------------------------------------------------------------------
#  Pregunta 7
#---------------------------------------------------------------
solve(0.8^2)
#------------------------------------------------------------------
#  Pregunta 7
#---------------------------------------------------------------
(0.8^2)
dbinom(4,4,0.8)
dbinom(2,4,0.8)
dbinom(3,4,0.8)
dbinom(8,4,0.8)
dbinom(10,4,0.8)
dbinom(5,4,0.8)
dbinom(3,4,0.8)
pbinom(3,4,0.8)
pbinom(3,5,0.8)
qbinom(3,4,0.8)
dbinom(3,4,0.8)
dbinom(3,4,0.2)
dbinom(3,3,0.8)
dbinom(3,4,0.8)
steadyStates(mcP)
steadyStates(mcP)
steadyStates(P)
createSequenceMatrix(mcP)
createSequenceMatrix(P)
createSequenceMatrix(p)
# Creamos las matriz de transición
labels <- c('H', 'C1', 'C2', 'B')
byRow <- TRUE
x <- c(1, 0, 0, 0, 0.2, 0, 0.8, 0, 0, 0.2, 0, 0.8, 0, 0, 0, 1)
P <- matrix(data = x, byrow = byRow, nrow = 4, dimnames = list(labels, labels))
P
#Comprobamos que la suma de las probabilidades de cada una de las cuatro filas
#es 1.
rowSums(P)
#Calculamos la suma de las probabilidades de cada una de las columnas
colSums(P)
#Llamamos a la librería markovchain para chequear primero nuestra cadena de Markov
library(markovchain)
mcP = new("markovchain",transitionMatrix = P)
mcP
#Comprobamos un resumen de la cadena de Markov mcP
summary(mcP)
plot(mcP)
#Creamos programa, para ello vamos a usar la librería matrixcalc para realizar
#las potencias de la matriz de transición mcP
library(matrixcalc)
mcL <- vector('list', length = 10)
for (i in (1:10)){
mcPi <- matrix.power(P, i)
zerosum <- sum(mcPi == 0)
mcL[[i]] <- zerosum
print(mcPi)
}
#La lista con el número de ceros de la potencia de mcP elevado a i, siendo
# i=1, i=2, i=3, ..., i=10, es:
mcL
#Podemos confirmar que la cadena de MArkov es regular ya que la cantidad de ceros
# de mcP es constante. (cantidad de ceros = 8)
#------------------------------------------------------------------
#  Pregunta 5
#---------------------------------------------------------------
#Usando la librería markovchain, llamamos a la función canonicForm para obtener
#la función canónica del objeto cadena de markov mcP, que es nuestra matriz de
#transición definida anteriormente.
mcP_canonica <- canonicForm(mcP)
mcP_canonica
solve_equation_1 <- function(L) {
return(L^2 - 0.2)
}
solution_1 <- uniroot(solve_equation_1, interval = c(0, 1))
L_1 <- solution_1$root
L_1
solve_equation_2 <- function(M) {
return(2*M^2 - M)
}
solution_2 <- uniroot(solve_equation_2, interval = c(0.1, 1))
L_2 <- solution_2$root
L_2
steadyStates(mcP)
createSequenceMatrix(P)
createSequenceMatrix(mcP)
transientStates(mcP)
prob_B_C1 <- markovchainSequence(n = 1,
markovchain = mcP,
t0 = "C1",
t1 = "B")
prob_B_C1 <- markovchainSequence(n = 1,markovchain = mcP,t0 = "C1",t1 = "B")
prob_B_C1 <- markovchainSequence(n = 1,markovchain = mcP,t0="C1",t1="B")
#------------------------------------------------------------------
#  Pregunta 7
#---------------------------------------------------------------
#Calcular la probabilidad de llegar a B desde C1
mcP
prob_B_C1 <- markovchainSequence(n = 1,markovchain = mcP,t0 = C1,t1 = B)
prob_B_C1 <- markovchainSequence(n = 1,markovchain = mcP)
prob_B_C
prob_B_C1
prob_B_C1 <- markovchainSequence(n = 4,markovchain = mcP)
prob_B_C1
prob_B_C1 <- markovchainSequence(n = 1,markovchain = mcP, t0= 'C1',t1 = 'B')
prob_B_C1 <- markovchainSequence(n = 1,markovchain = mcP, t0= 'C1',t3 = 'B')
prob_B_C1 <- markovchainSequence(n = 1,markovchain = mcP, t0= 'C1',t4 = 'B')
prob_B_C1 <- markovchainSequence(n = 1,markovchain = mcP, t0= 'C1',t1 = 'b')
prob_B_C1 <- markovchainSequence(n = 1,markovchain = mcP, t0= 'C1',t1 = 'B')
#------------------------------------------------------------------
#  Pregunta 7
#---------------------------------------------------------------
#Calcular la probabilidad de llegar a B desde C1
mcP
prob_B_C1 <- markovchainSequence(n = 1,markovchain = mcP, t0= 'C1',t1 = 'B')
prob_B_C1 <- markovchainSequence(n = 1,markovchain = mcP, t0= 'C1')
prob_B_C
prob_B_C1
prob_B_C1 <- markovchainSequence(n = 1,markovchain = mcP, t0= 'C1', t1 = 'B')
prob_B_C1 <- markovchainSequence(n = 2,markovchain = mcP, t0= 'C1', t1 = 'B')
prob_B_C1 <- markovchainSequence(n = 4,markovchain = mcP, t0= 'C1', t1 = 'B')
prob_B_C1
prob_B_C1 <- markovchainSequence(n = 1,markovchain = mcP, t0= 'C1',
include.t0 = TRUE)
prob_B_C1
test <- createSequenceMatrix(mcP, toRowProbs = TRUE)
test
test <- createSequenceMatrix(P, toRowProbs = TRUE)
test
P <- matrix(data = x, byrow = byRow, nrow = 4, dimnames = list(labels, labels))
P
#Comprobamos que la suma de las probabilidades de cada una de las cuatro filas
#es 1.
rowSums(P)
#Calculamos la suma de las probabilidades de cada una de las columnas
colSums(P)
test <- createSequenceMatrix(P, toRowProbs = TRUE)
test
test <- createSequenceMatrix(P, toRowProbs = TRUE)
test <- createSequenceMatrix(mcP, toRowProbs = TRUE)
test
#------------------------------------------------------------------
#  Pregunta 7
#---------------------------------------------------------------
#Calcular la probabilidad de llegar a B desde C1
0.8^2*1/1-0.8*(1-0.8)
#------------------------------------------------------------------
#  Pregunta 7
#---------------------------------------------------------------
#Calcular la probabilidad de llegar a B desde C1
(0.8^2)*(1/1-0.8)*(1-0.8)
#------------------------------------------------------------------
#  Pregunta 7
#---------------------------------------------------------------
#Calcular la probabilidad de llegar a B desde C1
(0.8^2)*((1/1-0.8)*(1-0.8))
#------------------------------------------------------------------
#  Pregunta 7
#---------------------------------------------------------------
#Calcular la probabilidad de llegar a B desde C1
(0.8^2)*((1/(1-0.8)*(1-0.8))
#------------------------------------------------------------------
#  Pregunta 7
#---------------------------------------------------------------
#Calcular la probabilidad de llegar a B desde C1
(0.8^2)*(1/(1-0.8))*(1-0.8)
#------------------------------------------------------------------
#  Pregunta 7
#---------------------------------------------------------------
#Calcular la probabilidad de llegar a B desde C1
l <- (0.8^2)*(1/(1-0.8))*(1-0.8)
l
#------------------------------------------------------------------
#  Pregunta 7
#---------------------------------------------------------------
#Calcular la probabilidad de llegar a B desde C1
(0.8^2)*(1/(1-0.8))*(1-0.8)
#Calcular la probabilidad de llegar a H desde C1
(0.2)*(1/(1-0.2))*(1-0.2)
steadyStates(mcP)
# Creamos las matriz de transición
labels <- c('H', 'C1', 'C2', 'B')
byRow <- TRUE
x <- c(1, 0, 0, 0, 0.2, 0, 0.8, 0, 0, 0.2, 0, 0.8, 0, 0, 0, 1)
P <- matrix(data = x, byrow = byRow, nrow = 4, dimnames = list(labels, labels))
P
#Comprobamos que la suma de las probabilidades de cada una de las cuatro filas
#es 1.
rowSums(P)
#Calculamos la suma de las probabilidades de cada una de las columnas
colSums(P)
#Llamamos a la librería markovchain para chequear primero nuestra cadena de Markov
library(markovchain)
mcP = new("markovchain",transitionMatrix = P)
mcP
#Comprobamos un resumen de la cadena de Markov mcP
summary(mcP)
plot(mcP)
#Creamos programa, para ello vamos a usar la librería matrixcalc para realizar
#las potencias de la matriz de transición mcP
library(matrixcalc)
mcL <- vector('list', length = 10)
for (i in (1:10)){
mcPi <- matrix.power(P, i)
zerosum <- sum(mcPi == 0)
mcL[[i]] <- zerosum
print(mcPi)
}
#La lista con el número de ceros de la potencia de mcP elevado a i, siendo
# i=1, i=2, i=3, ..., i=10, es:
mcL
#Podemos confirmar que la cadena de MArkov es regular ya que la cantidad de ceros
# de mcP es constante. (cantidad de ceros = 8)
#------------------------------------------------------------------
#  Pregunta 5
#---------------------------------------------------------------
#Usando la librería markovchain, llamamos a la función canonicForm para obtener
#la función canónica del objeto cadena de markov mcP, que es nuestra matriz de
#transición definida anteriormente.
mcP_canonica <- canonicForm(mcP)
mcP_canonica
solve_equation_1 <- function(L) {
return(L^2 - 0.2)
}
solution_1 <- uniroot(solve_equation_1, interval = c(0, 1))
L_1 <- solution_1$root
L_1
solve_equation_2 <- function(M) {
return(2*M^2 - M)
}
solution_2 <- uniroot(solve_equation_2, interval = c(0.1, 1))
L_2 <- solution_2$root
L_2
#------------------------------------------------------------------
#  Pregunta 7
#---------------------------------------------------------------
#Calcular la probabilidad de llegar a B desde C1
(0.8^2)*(1/(1-0.8))*(1-0.8)
#Calcular la probabilidad de llegar a H desde C1
(0.2)*(1/(1-0.2))*(1-0.2)
steadyStates(mcP)
canonicR(mcP)
I <- c(1,0,0,1)
d <- mcP_canonica[3:4, 3:4]
d
a <- mcP_canonica[3:4, 1:2]
a
i <- matrix(data = I, byrow = byRow, nrow = 2)
i
I <- c(1,0,0,1)
i <- matrix(data = I, byrow = byRow, nrow = 2)
d <- mcP_canonica[3:4, 3:4]
a <- mcP_canonica[3:4, 1:2]
s <- ((i-d)^-1)
Sr <- matrix.power(s, a)
Sr
D <- mcP_canonica[3:4, 3:4]
D
Sr <- s%*%a
Sr
s <- ((i-d)^-1)
Sr <- s%*%a
Sr
s <- solve(i-d)
Sr <- s%*%a
Sr
s2 <- solve(s)
Sr <- s2%*%a
Sr
s2
install.packages("Biodem")
s2 <- mtx.exp(s,-1)
#------------------------------------------------------------------
#  Pregunta 8
#---------------------------------------------------------------
library(Biodem)
I <- c(1,0,0,1)
i <- matrix(data = I, byrow = byRow, nrow = 2)
d <- mcP_canonica[3:4, 3:4]
a <- mcP_canonica[3:4, 1:2]
s <- (i-d)
s2 <- mtx.exp(s,-1)
s2
Sr <- s2%*%a
Sr
#------------------------------------------------------------------
#  Pregunta 8
#---------------------------------------------------------------
#Calculamos Sr
library(Biodem)
I <- c(1,0,0,1)
i <- matrix(data = I, byrow = byRow, nrow = 2)
d <- mcP_canonica[3:4, 3:4]
a <- mcP_canonica[3:4, 1:2]
s <- (i-d)
s2 <- mtx.exp(s,-1)
Sr <- s2%*%a
Sr
S <- c(1,0,0,0,0,1,0,0,0.2,0,0,0,0,0.8,0,0)
s <- matrix(data = S, byrow = byRow, nrow = 4)
s
#Calculamos limites suficientemente grandes
St <- c(1,0,0,0,0,1,0,0,0.2,0,0,0,0,0.8,0,0)
st <- matrix(data = S, byrow = byRow, nrow = 4)
st
St_10 <- mtx.exp(st,-1)
st_100 <- mtx.exp(st,-1)
st_1000 <- mtx.exp(st,-1)
St_10
st_100
st_1000
#Calculamos limites suficientemente grandes
St <- c(1,0,0,0,0,1,0,0,0.2,0,0,0,0,0.8,0,0)
st <- matrix(data = S, byrow = byRow, nrow = 4)
st
St_10 <- mtx.exp(st,10)
st_100 <- mtx.exp(st,100)
st_1000 <- mtx.exp(st,1000)
St_10
st_100
st_1000
st_1000 <- mtx.exp(st,9999)
st_1000
st%*%st%*%st%*%st
#Calculamos limites suficientemente grandes
St <- c(1,0,0,0,0,1,0,0,0.2,0,0,0,0,0.8,0,0)
st <- matrix(data = S, byrow = byRow, nrow = 4)
st
St_10 <- mtx.exp(st,10)
st_100 <- mtx.exp(st,100)
st_1000 <- mtx.exp(st,9999)
St_10
st_100
st_1000
# Creamos las matriz de transición
labels <- c('H', 'C1', 'C2', 'B')
byRow <- TRUE
x <- c(1, 0, 0, 0, 0.2, 0, 0.8, 0, 0, 0.2, 0, 0.8, 0, 0, 0, 1)
P <- matrix(data = x, byrow = byRow, nrow = 4, dimnames = list(labels, labels))
P
#Comprobamos que la suma de las probabilidades de cada una de las cuatro filas
#es 1.
rowSums(P)
#Calculamos la suma de las probabilidades de cada una de las columnas
colSums(P)
#Llamamos a la librería markovchain para chequear primero nuestra cadena de Markov
library(markovchain)
mcP = new("markovchain",transitionMatrix = P)
mcP
#Comprobamos un resumen de la cadena de Markov mcP
summary(mcP)
plot(mcP)
#Creamos programa, para ello vamos a usar la librería matrixcalc para realizar
#las potencias de la matriz de transición mcP
library(matrixcalc)
mcL <- vector('list', length = 10)
for (i in (1:10)){
mcPi <- matrix.power(P, i)
zerosum <- sum(mcPi == 0)
mcL[[i]] <- zerosum
print(mcPi)
}
#La lista con el número de ceros de la potencia de mcP elevado a i, siendo
# i=1, i=2, i=3, ..., i=10, es:
mcL
#Podemos confirmar que la cadena de MArkov es regular ya que la cantidad de ceros
# de mcP es constante. (cantidad de ceros = 8)
#------------------------------------------------------------------
#  Pregunta 5
#---------------------------------------------------------------
#Usando la librería markovchain, llamamos a la función canonicForm para obtener
#la función canónica del objeto cadena de markov mcP, que es nuestra matriz de
#transición definida anteriormente.
mcP_canonica <- canonicForm(mcP)
mcP_canonica
solve_equation_1 <- function(L) {
return(L^2 - 0.2)
}
solution_1 <- uniroot(solve_equation_1, interval = c(0, 1))
L_1 <- solution_1$root
L_1
solve_equation_2 <- function(M) {
return(2*M^2 - M)
}
solution_2 <- uniroot(solve_equation_2, interval = c(0.1, 1))
L_2 <- solution_2$root
L_2
#------------------------------------------------------------------
#  Pregunta 7
#---------------------------------------------------------------
#Calcular la probabilidad de llegar a B desde C1
(0.8^2)*(1/(1-0.8))*(1-0.8)
#Calcular la probabilidad de llegar a H desde C1
(0.2)*(1/(1-0.2))*(1-0.2)
#------------------------------------------------------------------
#  Pregunta 8
#---------------------------------------------------------------
#Calculamos Sr
library(Biodem)
I <- c(1,0,0,1)
i <- matrix(data = I, byrow = byRow, nrow = 2)
d <- mcP_canonica[3:4, 3:4]
a <- mcP_canonica[3:4, 1:2]
s <- (i-d)
s2 <- mtx.exp(s,-1)
Sr <- s2%*%a
Sr
#Calculamos limites suficientemente grandes
St <- c(1,0,0,0,0,1,0,0,0.2,0,0,0,0,0.8,0,0)
st <- matrix(data = S, byrow = byRow, nrow = 4)
st
St_10 <- mtx.exp(st,10)
st_100 <- mtx.exp(st,100)
st_1000 <- mtx.exp(st,9999)
St_10
st_100
st_1000
St_10 <- mtx.exp(st,9)
st_100 <- mtx.exp(st,100)
st_1000 <- mtx.exp(st,1000)
St_9
St_9 <- mtx.exp(st,9)
St_9
